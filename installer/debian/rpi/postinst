#!/bin/bash

### Check if this is a fresh install or upgrade
if [ -f "/usr/local/bin/pifire/firstinstall" ]; then
  echo "PiFire has been upgraded"
  echo "Starting Supervisor"
  service supervisor start
  exit 0
fi

# Find the rows and columns. Will default to 80x24 if it can not be detected.
screen_size=$(stty size 2>/dev/null || echo 24 80)
rows=$(echo $screen_size | awk '{print $1}')
columns=$(echo $screen_size | awk '{print $2}')

# Divide by two so the dialogs take up half of the screen.
r=$((rows / 2))
c=$((columns / 2))
# If the screen is small, modify defaults
r=$((r < 20 ? 20 : r))
c=$((c < 70 ? 70 : c))

# Display the welcome dialog
whiptail --msgbox --backtitle "Welcome" --title "PiFire Automated Installer" "This installer will transform your Raspberry Pi into a connected Smoker Controller.  NOTE: This installer is intended to be run on a fresh install of Raspbian Lite Stretch +.  This script is currently in Alpha testing so there may be bugs." ${r} ${c}

# Install dependencies
sudo -H pip3 install flask
sudo -H pip3 install pushbullet.py
sudo -H pip3 install flask_qrcode
sudo -H pip3 install flask-socketio
sudo -H pip3 install eventlet==0.30.2
sudo -H pip3 install gpiozero
sudo -H pip3 install redis

### Setup nginx to proxy to gunicorn

# Delete default configuration
rm /etc/nginx/sites-enabled/default

# Create link in sites-enabled
ln -s /etc/nginx/sites-available/pifire /etc/nginx/sites-enabled

# Restart nginx
service nginx restart

### Setup Supervisor to Start Apps on Boot / Restart on Failures

SVISOR=$(whiptail --title "Would you like to enable the supervisor WebUI?" --radiolist "This allows you to check the status of the supervised processes via a web browser, and also allows those processes to be restarted directly from this interface. (Recommended)" 20 78 2 "ENABLE_SVISOR" "Enable the WebUI" ON "DISABLE_SVISOR" "Disable the WebUI" OFF 3>&1 1>&2 2>&3)

if [[ $SVISOR == "ENABLE_SVISOR" ]]; then
  if grep -q 'inet_http_server' /etc/supervisor/supervisord.conf ; then
    whiptail --msgbox --backtitle "Supervisor WebUI Setup" --title "Already Setup" "Appears the WebUI has already been setup reusing exiting settings" ${r} ${c}
  else
    echo " " | sudo tee -a /etc/supervisor/supervisord.conf >/dev/null
    echo "[inet_http_server]" | sudo tee -a /etc/supervisor/supervisord.conf >/dev/null
    echo "port = 9001" | sudo tee -a /etc/supervisor/supervisord.conf >/dev/null
    USERNAME=$(whiptail --inputbox "Choose a username [default: user]" 8 78 user --title "Choose Username" 3>&1 1>&2 2>&3)
    echo "username = " $USERNAME | sudo tee -a /etc/supervisor/supervisord.conf >/dev/null
    PASSWORD=$(whiptail --passwordbox "Enter your password" 8 78 --title "Choose Password" 3>&1 1>&2 2>&3)
    echo "password = " $PASSWORD | sudo tee -a /etc/supervisor/supervisord.conf >/dev/null
    whiptail --msgbox --backtitle "Supervisor WebUI Setup" --title "Setup Completed" "You now should be able to access the Supervisor WebUI at http://your.ip.address.here:9001 with the username and password you have chosen." ${r} ${c}
  fi
else
  echo "No WebUI Setup."
fi

# If supervisor isn't already running, startup Supervisor
service supervisor restart

### Setup modules

cd /usr/local/bin/pifire || exit 1 # Change dir to where the settings.py application is (and common.py)

GRILLPLAT=$(whiptail --title "Select your Grill Platform module to use." --radiolist "Select the Grill Platform module for PiFire to use.  This module initializes GPIOs to control input / output to Grill Platform components like the fan, auger, igniter, etc." 20 78 2 "PIFIRE" "Standard Rasperry Pi <- DEFAULT" ON "PROTOTYPE" "Prototype - Not Platform Dependant (for test only)" OFF 3>&1 1>&2 2>&3)

if [[ $GRILLPLAT == "PIFIRE" ]]; then
  python3 settings.py -g pifire
fi

if [[ $GRILLPLAT == "PROTOTYPE" ]]; then
  python3 settings.py -g prototype
fi

ADC=$(whiptail --title "Select your ADC module to use." --radiolist "This module gets temperature data from the attached probes such as the RTD Grill Probe, the food probes, etc." 20 78 2 "ADS1115" "Standard ADC <- Default" ON "PROTOTYPE" "Prototype/Simulated (for test only)" OFF 3>&1 1>&2 2>&3)

if [[ $ADC == "ADS1115" ]]; then
  python3 settings.py -a ads1115
  sudo -H pip3 install ADS1115
fi

if [[ $ADC == "PROTOTYPE" ]]; then
  python3 settings.py -a prototype
fi

DISPLAY=$(whiptail --title "Select your Display module to use." --radiolist "Select display type (and input) module for PiFire to use.  Some displays may also have menu button functions indicated by a B appended to the name." 20 78 8 "SSD1306" "OLED Display (128x64) <- DEFAULT" ON "SSD1306B" "OLED Display (128x64) w/Button Input" OFF "ST7789P" "IPS/TFT SPI Display (240x240)P-Pimoroni Libs" OFF "ILI9341" "TFT Color Display (240x320)" OFF "ILI9341B" "TFT Color Display (240x320) w/Buttons" OFF "PROTOTYPE" "Prototype/Console Output (for test only)" OFF "PYGAME" "Prototype/PyGame Desktop Output (for test only)" OFF "PYGAME240320" "Prototype/PyGame (240x320) (for test only)" OFF "PYGAME240320B" "Prototype/PyGame B (240x320) (for test only)" OFF 3>&1 1>&2 2>&3)

if [[ $DISPLAY == "SSD1306" ]]; then
  python3 settings.py -d ssd1306
  sudo -H pip3 install luma.oled
fi

if [[ $DISPLAY == "SSD1306B" ]]; then
  python3 settings.py -d ssd1306b
  sudo -H pip3 install luma.oled
fi

if [[ $DISPLAY == "ST7789P" ]]; then
  python3 settings.py -d st7789p
  echo "dtparam=spi=on" | sudo tee -a /boot/config.txt >/dev/null
  sudo -H pip3 install st7789
fi

if [[ $DISPLAY == "ILI9341" ]]; then
  python3 settings.py -d ili9341
  echo "dtparam=spi=on" | sudo tee -a /boot/config.txt >/dev/null
  sudo -H pip3 install luma.lcd
fi

if [[ $DISPLAY == "ILI9341B" ]]; then
  python3 settings.py -d ili9341b
  echo "dtparam=spi=on" | sudo tee -a /boot/config.txt >/dev/null
  sudo -H pip3 install luma.lcd
fi

if [[ $DISPLAY == "PROTOTYPE" ]]; then
  python3 settings.py -d prototype
fi

if [[ $DISPLAY == "PYGAME" ]]; then
  python3 settings.py -d pygame
  sudo -H pip3 install pygame
fi

if [[ $DISPLAY == "PYGAME240320" ]]; then
  python3 settings.py -d pygame_240x320
  sudo -H pip3 install pygame
fi

if [[ $DISPLAY == "PYGAME240320B" ]]; then
  python3 settings.py -d pygame_240x320b
  sudo -H pip3 install pygame
fi

DIST=$(whiptail --title "Select your Range module to use." --radiolist "Optional distance sensor for hopper/pellet level reporting.  Default is prototype/none, which is equivalent to no attached sensor." 20 78 3 "PROTOTYPE" "Prototype/None <- DEFAULT" ON "VL53L0X" "Time of Flight Light Range Sensor" OFF "HCSR04" "Ultrasonic Range Sensor" OFF 3>&1 1>&2 2>&3)

if [[ $DIST == "VL53L0X" ]]; then
  python3 settings.py -r vl53l0x
  sudo -H pip3 install git+https://github.com/pimoroni/VL53L0X-python.git
fi

if [[ $DIST == "HCSR04" ]]; then
  python3 settings.py -r hcsr04
  sudo -H pip3 install hcsr04sensor
fi

if [[ $DIST == "PROTOTYPE" ]]; then
  python3 settings.py -r prototype
fi

echo " " | sudo tee -a /usr/local/bin/pifire/firstinstall >/dev/null

# Finished
whiptail --msgbox --backtitle "Install Complete / Reboot Required" --title "Installation Completed" "Congratulations, the installation is complete.  At this time, you should reboot your system to complete the installation.  You should be able to access your application by opening a browser on your PC or other device and using the IP address for this Pi.  Enjoy!" ${r} ${c}

exit 0
